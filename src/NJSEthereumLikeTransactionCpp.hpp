// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSETHEREUMLIKETRANSACTION_HPP
#define DJINNI_GENERATED_NJSETHEREUMLIKETRANSACTION_HPP


#include "../include/../utils/optional.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSEthereumLikeAddressCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/EthereumLikeTransaction.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSEthereumLikeTransaction: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSEthereumLikeTransaction() {};
    NJSEthereumLikeTransaction(const std::shared_ptr<ledger::core::api::EthereumLikeTransaction> &iEthereumLikeTransaction):_EthereumLikeTransaction(iEthereumLikeTransaction){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::EthereumLikeTransaction> &object);
    static Nan::Persistent<ObjectTemplate> EthereumLikeTransaction_prototype;
    std::shared_ptr<ledger::core::api::EthereumLikeTransaction> getCppImpl(){return _EthereumLikeTransaction;};

private:
    /** Get the hash of the transaction. */
    static NAN_METHOD(getHash);

    /** Get the nonce of the transaction : sequence number issued by originating EOA */
    static NAN_METHOD(getNonce);

    /** Get Gas price (in wei) */
    static NAN_METHOD(getGasPrice);

    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay */
    static NAN_METHOD(getGasLimit);

    /** Effective used gas */
    static NAN_METHOD(getGasUsed);

    /** Get destination ETH address */
    static NAN_METHOD(getReceiver);

    /** Get ETH sender address */
    static NAN_METHOD(getSender);

    /** Get amount of ether to send */
    static NAN_METHOD(getValue);

    /** Get binary data payload */
    static NAN_METHOD(getData);

    /** Serialize the transaction to its raw format. */
    static NAN_METHOD(serialize);

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction
     */
    static NAN_METHOD(getDate);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
    std::shared_ptr<ledger::core::api::EthereumLikeTransaction> _EthereumLikeTransaction;
};
#endif //DJINNI_GENERATED_NJSETHEREUMLIKETRANSACTION_HPP
