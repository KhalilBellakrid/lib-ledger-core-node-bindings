// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#include "NJSEthereumLikeExtendedPublicKeyCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSEthereumLikeExtendedPublicKey::derive) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::derive needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::derive : implementation of EthereumLikeExtendedPublicKey is not valid");
    }

    auto result = cpp_impl->derive(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSEthereumLikeAddress::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSEthereumLikeAddress>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSEthereumLikeExtendedPublicKey::derivePublicKey) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::derivePublicKey needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::derivePublicKey : implementation of EthereumLikeExtendedPublicKey is not valid");
    }

    auto result = cpp_impl->derivePublicKey(arg_0);

    //Wrap result in node object
    Local<Array> arg_1 = Nan::New<Array>();
    for(size_t arg_1_id = 0; arg_1_id < result.size(); arg_1_id++)
    {
        auto arg_1_elem = Nan::New<Uint32>(result[arg_1_id]);
        arg_1->Set((int)arg_1_id,arg_1_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSEthereumLikeExtendedPublicKey::deriveHash160) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::deriveHash160 needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::deriveHash160 : implementation of EthereumLikeExtendedPublicKey is not valid");
    }

    auto result = cpp_impl->deriveHash160(arg_0);

    //Wrap result in node object
    Local<Array> arg_1 = Nan::New<Array>();
    for(size_t arg_1_id = 0; arg_1_id < result.size(); arg_1_id++)
    {
        auto arg_1_elem = Nan::New<Uint32>(result[arg_1_id]);
        arg_1->Set((int)arg_1_id,arg_1_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSEthereumLikeExtendedPublicKey::toBase58) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::toBase58 needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::toBase58 : implementation of EthereumLikeExtendedPublicKey is not valid");
    }

    auto result = cpp_impl->toBase58();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSEthereumLikeExtendedPublicKey::getRootPath) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::getRootPath needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::getRootPath : implementation of EthereumLikeExtendedPublicKey is not valid");
    }

    auto result = cpp_impl->getRootPath();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSEthereumLikeExtendedPublicKey::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSEthereumLikeExtendedPublicKey function can only be called as constructor (use New)");
    }
    NJSEthereumLikeExtendedPublicKey *node_instance = new NJSEthereumLikeExtendedPublicKey(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSEthereumLikeExtendedPublicKey::EthereumLikeExtendedPublicKey_prototype;

Handle<Object> NJSEthereumLikeExtendedPublicKey::wrap(const std::shared_ptr<ledger::core::api::EthereumLikeExtendedPublicKey> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(EthereumLikeExtendedPublicKey_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSEthereumLikeExtendedPublicKey *new_obj = new NJSEthereumLikeExtendedPublicKey(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSEthereumLikeExtendedPublicKey::wrap: object template not valid");
    }
    return obj;
}

NAN_METHOD(NJSEthereumLikeExtendedPublicKey::isNull) {
    NJSEthereumLikeExtendedPublicKey* obj = Nan::ObjectWrap::Unwrap<NJSEthereumLikeExtendedPublicKey>(info.This());
    auto cpp_implementation = obj->getCppImpl();
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSEthereumLikeExtendedPublicKey::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSEthereumLikeExtendedPublicKey::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSEthereumLikeExtendedPublicKey").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"derive", derive);
    Nan::SetPrototypeMethod(func_template,"derivePublicKey", derivePublicKey);
    Nan::SetPrototypeMethod(func_template,"deriveHash160", deriveHash160);
    Nan::SetPrototypeMethod(func_template,"toBase58", toBase58);
    Nan::SetPrototypeMethod(func_template,"getRootPath", getRootPath);
    //Set object prototype
    EthereumLikeExtendedPublicKey_prototype.Reset(objectTemplate);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);

    //Add template to target
    target->Set(Nan::New<String>("NJSEthereumLikeExtendedPublicKey").ToLocalChecked(), func_template->GetFunction());
}
